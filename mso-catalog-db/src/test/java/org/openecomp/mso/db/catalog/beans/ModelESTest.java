/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 22 09:32:26 GMT 2017
 */

package org.openecomp.mso.db.catalog.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true)
public class ModelESTest extends ModelESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Model model0 = new Model();
      HashMap<String, ServiceRecipe> hashMap0 = new HashMap<String, ServiceRecipe>();
      ServiceRecipe serviceRecipe0 = new ServiceRecipe();
      hashMap0.putIfAbsent("yyyy-MM-dd'T'HH:mm:ss.SSSXXX", serviceRecipe0);
      model0.setRecipes(hashMap0);
      Map<String, ServiceRecipe> map0 = model0.getRecipes();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelVersionId("9WI;kp?]");
      String string0 = model0.getModelVersionId();
      assertEquals("9WI;kp?]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelVersion("_Y+vZ)59ie");
      String string0 = model0.getModelVersion();
      assertEquals("_Y+vZ)59ie", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelType("{!]r;T");
      String string0 = model0.getModelType();
      assertEquals("{!]r;T", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelName(", description=");
      String string0 = model0.getModelName();
      assertEquals(", description=", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelInvariantId(".m");
      String string0 = model0.getModelInvariantId();
      assertEquals(".m", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelCustomizationName("|<HBAfp\"RZv\"?mz&H");
      String string0 = model0.getModelCustomizationName();
      assertEquals("|<HBAfp\"RZv\"?mz&H", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelCustomizationId("RA");
      String string0 = model0.getModelCustomizationId();
      assertEquals("RA", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelCustomizationId("");
      String string0 = model0.getModelCustomizationId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Model model0 = new Model();
      model0.setId((-2490));
      int int0 = model0.getId();
      assertEquals((-2490), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Model model0 = new Model();
      Timestamp timestamp0 = new Timestamp(0L);
      model0.setCreated(timestamp0);
      Timestamp timestamp1 = model0.getCreated();
      assertSame(timestamp1, timestamp0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Model model0 = new Model();
      Timestamp timestamp0 = new Timestamp(1L);
      model0.setCreated(timestamp0);
      Timestamp timestamp1 = model0.getCreated();
      assertSame(timestamp1, timestamp0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.toString();
      assertEquals("Model: modelCustomizationId=null,modelCustomizationName=null,modelInvariantId=null,modelName=null,modelType=null,modelVersion=null,modelVersionId=null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelType("");
      String string0 = model0.getModelType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.getModelInvariantId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Model model0 = new Model();
      Map<String, ServiceRecipe> map0 = model0.getRecipes();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.getModelCustomizationName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelVersion("");
      String string0 = model0.getModelVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelVersionId("");
      String string0 = model0.getModelVersionId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.getModelType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelInvariantId("");
      String string0 = model0.getModelInvariantId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelName("");
      String string0 = model0.getModelName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Model model0 = new Model();
      model0.setModelCustomizationName("");
      String string0 = model0.getModelCustomizationName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Model model0 = new Model();
      Timestamp timestamp0 = new Timestamp(0L);
      model0.setCreated(timestamp0);
      String string0 = model0.toString();
      assertEquals("Model: modelCustomizationId=null,modelCustomizationName=null,modelInvariantId=null,modelName=null,modelType=null,modelVersion=null,modelVersionId=null,created=1/1/70 12:00 AM", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Model model0 = new Model();
      int int0 = model0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Model model0 = new Model();
      HashMap<String, ServiceRecipe> hashMap0 = new HashMap<String, ServiceRecipe>();
      model0.setRecipes(hashMap0);
      Map<String, ServiceRecipe> map0 = model0.getRecipes();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.getModelVersionId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.getModelCustomizationId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.getModelVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Model model0 = new Model();
      Timestamp timestamp0 = model0.getCreated();
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.getModelName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Model model0 = new Model();
      model0.setId(2803);
      int int0 = model0.getId();
      assertEquals(2803, int0);
  }
}
